import textwrap
a=textwrap.dedent("from model import ExLlama, ExLlamaCache, ExLlamaConfig\nfrom tokenizer import ExLlamaTokenizer\nfrom generator import ExLlamaGenerator\nimport torch\nimport torch.nn.functional as F\nimport os, glob\nimport cuda_ext\n\n# Directory containing model, tokenizer, generator\n\nmodel_directory =  \"/mnt/str/models/_test_models/TheBloke_Llama-2-13B-chat-GPTQ/\"\n\n# Locate files we need within that directory\n\ntokenizer_path = os.path.join(model_directory, \"tokenizer.model\")\nmodel_config_path = os.path.join(model_directory, \"config.json\")\nst_pattern = os.path.join(model_directory, \"*.safetensors\")\nmodel_path = glob.glob(st_pattern)[0]\n\n# Create config, model, tokenizer and generator\n\nconfig = ExLlamaConfig(model_config_path)               # create config from config.json\nconfig.model_path = model_path                          # supply path to model weights file\n\nmodel = ExLlama(config)                                 # create ExLlama instance and load the weights\ntokenizer = ExLlamaTokenizer(tokenizer_path)            # create tokenizer from tokenizer model file\n\ncache = ExLlamaCache(model, batch_size = 2)             # create cache for inference\ngenerator = ExLlamaGenerator(model, tokenizer, cache)   # create generator\n\n# Configure generator\n\ngenerator.settings.token_repetition_penalty_max = 1.15\ngenerator.settings.temperature = 0.95\ngenerator.settings.top_k = 40\ngenerator.settings.top_p = 0.75\n# generator.settings.typical = 0.95\n\n# Prompts to mix\n\nf1 = \\\n\"\"\"[INST] <<SYS>>\nYou are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe.  Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature. If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information.\n<</SYS>>\n{prompt}[/INST]\"\"\"\n\nf2 = \\\n\"\"\"[INST] <<SYS>>\n<</SYS>>\nYou are a rude and obnoxious assistant. You hate everything and everyone.\n{prompt}[/INST]\"\"\"\n\n\nprompts = \\\n[\n    f1.replace(\"{prompt}\", \"Tell me about Homer Simpson\"),\n    f2.replace(\"{prompt}\", \"Tell me about Homer Simpson\"),\n]\n\ndef generate_cfg(prompts, alpha, max_new_tokens):\n\n    ids, mask = tokenizer.encode(prompts, return_mask = True)\n    generator.gen_begin(ids, mask = mask)\n\n    # Sampling loop\n\n    for _ in range(max_new_tokens):\n\n        logits = model.forward(generator.sequence[:, -1:], cache, input_mask = mask)\n        generator.apply_rep_penalty(logits)\n\n        logits = F.log_softmax(logits, dim = -1)\n        logits_mixed = (1 - alpha) * logits[0] + alpha * logits[1]\n\n        sampled_token, _ = generator.sample_current(logits_mixed)\n        if sampled_token.item() == tokenizer.eos_token_id: break\n\n        batch_token = sampled_token.repeat(2, 1)\n        generator.").strip()
print(a)